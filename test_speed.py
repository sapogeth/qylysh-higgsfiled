#!/usr/bin/env python3
"""
Test Speed Optimization
Measures generation speed and validates optimizations
"""

import time
import config
from local_image_generator import LocalImageGenerator

def test_speed():
    """Test image generation speed with current config"""
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 70)
    print()

    # Show current config
    print("üìä –¢–µ–∫—É—â–∞—è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   NUM_INFERENCE_STEPS: {config.NUM_INFERENCE_STEPS}")
    print(f"   GUIDANCE_SCALE: {config.GUIDANCE_SCALE}")
    print(f"   USE_IDENTITY_LOCK: {config.USE_IDENTITY_LOCK}")
    print(f"   IP_ADAPTER_SCALE: {config.IP_ADAPTER_SCALE if config.USE_IDENTITY_LOCK else 'N/A'}")
    print(f"   SCHEDULER_TYPE: {config.SCHEDULER_TYPE}")
    print(f"   ENABLE_ATTENTION_SLICING: {config.ENABLE_ATTENTION_SLICING}")
    print(f"   ENABLE_CHANNELS_LAST: {getattr(config, 'ENABLE_CHANNELS_LAST', False)}")
    print(f"   SKIP_SAFETY_CHECKER: {config.SKIP_SAFETY_CHECKER}")
    print()

    # Initialize generator
    print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –∑–∞–π–º—ë—Ç ~60-120 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)...")
    generator = LocalImageGenerator()

    # Test prompt
    test_prompt = "Aldar Kose smiling in a village marketplace"

    print()
    print("=" * 70)
    print("üé® –¢–ï–°–¢ 1: –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó IP-Adapter")
    print("=" * 70)

    start_time = time.time()
    try:
        # Generate without IP-Adapter
        img1 = generator.generate_single(
            prompt=test_prompt,
            negative_prompt=config.NEGATIVE_PROMPT,
            ref_image=None,  # No IP-Adapter
        )
        elapsed1 = time.time() - start_time
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞: {elapsed1:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –†–∞–∑–º–µ—Ä: {img1.size}")
    except Exception as e:
        elapsed1 = None
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    print()
    print("=" * 70)
    print("üé® –¢–ï–°–¢ 2: –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –° IP-Adapter")
    print("=" * 70)

    if config.USE_IDENTITY_LOCK:
        from PIL import Image
        import os

        # Load reference image
        ref_path = os.path.join(os.path.dirname(__file__), config.IDENTITY_REFERENCE_IMAGE)
        if os.path.exists(ref_path):
            ref_image = Image.open(ref_path).convert('RGB')

            start_time = time.time()
            try:
                img2 = generator.generate_single(
                    prompt=test_prompt,
                    negative_prompt=config.NEGATIVE_PROMPT,
                    ref_image=ref_image,
                    ip_adapter_scale=config.IP_ADAPTER_SCALE
                )
                elapsed2 = time.time() - start_time
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞: {elapsed2:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   –†–∞–∑–º–µ—Ä: {img2.size}")

                if elapsed1:
                    overhead = ((elapsed2 - elapsed1) / elapsed1) * 100
                    print(f"   IP-Adapter overhead: +{overhead:.1f}%")
            except Exception as e:
                elapsed2 = None
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print(f"‚ö†Ô∏è  –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {ref_path}")
            elapsed2 = None
    else:
        print("‚ö†Ô∏è  IP-Adapter –æ—Ç–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        elapsed2 = None

    print()
    print("=" * 70)
    print("üé® –¢–ï–°–¢ 3: 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–æ—Ä–∏–±–æ—Ä–¥)")
    print("=" * 70)

    test_prompts = [
        "Aldar Kose riding a donkey across the steppe",
        "Aldar Kose talking with a merchant in a bazaar",
        "Aldar Kose laughing with children by a yurt"
    ]

    start_time = time.time()
    try:
        # Load reference if needed
        ref_image = None
        if config.USE_IDENTITY_LOCK:
            ref_path = os.path.join(os.path.dirname(__file__), config.IDENTITY_REFERENCE_IMAGE)
            if os.path.exists(ref_path):
                ref_image = Image.open(ref_path).convert('RGB')

        images = []
        for i, prompt in enumerate(test_prompts, 1):
            print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/3... ", end='', flush=True)
            img_start = time.time()
            img = generator.generate_single(
                prompt=prompt,
                negative_prompt=config.NEGATIVE_PROMPT,
                ref_image=ref_image,
                ip_adapter_scale=config.IP_ADAPTER_SCALE if ref_image else None
            )
            img_elapsed = time.time() - img_start
            images.append(img)
            print(f"‚úì {img_elapsed:.2f}s")

        total_elapsed = time.time() - start_time
        avg_per_image = total_elapsed / len(test_prompts)

        print()
        print(f"‚úÖ –í—Å–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞: {total_elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_per_image:.2f} —Å–µ–∫—É–Ω–¥")

        # Estimate for full storyboard
        full_storyboard_time = avg_per_image * 6
        print(f"   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è 6 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {full_storyboard_time:.1f} —Å–µ–∫—É–Ω–¥ (~{full_storyboard_time/60:.1f} –º–∏–Ω—É—Ç)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    print()
    print("=" * 70)
    print("üìà –û–¶–ï–ù–ö–ê –°–ö–û–†–û–°–¢–ò")
    print("=" * 70)

    if elapsed1:
        print(f"üöÄ –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–±–µ–∑ IP-Adapter): {elapsed1:.2f} —Å–µ–∫—É–Ω–¥")

        if elapsed1 < 3:
            rating = "–û–¢–õ–ò–ß–ù–û! üèÜ"
        elif elapsed1 < 5:
            rating = "–•–û–†–û–®–û ‚úÖ"
        elif elapsed1 < 8:
            rating = "–ü–†–ò–ï–ú–õ–ï–ú–û ‚ö†Ô∏è"
        else:
            rating = "–ú–ï–î–õ–ï–ù–ù–û ‚ùå"

        print(f"   –û—Ü–µ–Ω–∫–∞: {rating}")

        # Calculate improvements
        old_time_estimate = 6.5  # Previous average
        improvement = ((old_time_estimate - elapsed1) / old_time_estimate) * 100

        if improvement > 0:
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: ~{improvement:.1f}% –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏!")

    if elapsed2:
        print(f"üéØ –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å IP-Adapter): {elapsed2:.2f} —Å–µ–∫—É–Ω–¥")

    print()
    print("=" * 70)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("=" * 70)
    print()

    # Recommendations
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if elapsed1 and elapsed1 > 5:
        print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å NUM_INFERENCE_STEPS –¥–æ 10 –¥–ª—è –µ—â—ë –±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
        print("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ IP-Adapter (USE_IDENTITY_LOCK = False)")
    elif elapsed1 and elapsed1 < 3:
        print("   ‚Ä¢ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å NUM_INFERENCE_STEPS –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        print("   ‚Ä¢ –ò–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å IP_ADAPTER_SCALE –¥–ª—è –±–æ–ª—å—à–µ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞")
    else:
        print("   ‚Ä¢ –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∞–ª–µ–Ω!")

    print()

if __name__ == "__main__":
    try:
        test_speed()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
